local function generate_iris_dataset()
    local X = {}
    local y = {}
    local noise_level = 0.05  -- 5% 的噪声水平
    local mislabel_rate = 0.03  -- 3% 的错误标签率

    for class = 1, 3 do
        for i = 1, 33 do  -- 每类33个样本，总共99个
            local sepal_length, sepal_width, petal_length, petal_width
            if class == 1 then  -- Setosa
                sepal_length = math.random() * 0.8 + 4.3
                sepal_width = math.random() * 0.8 + 2.3
                petal_length = math.random() * 0.5 + 1.0
                petal_width = math.random() * 0.2 + 0.1
            elseif class == 2 then  -- Versicolor
                sepal_length = math.random() * 0.8 + 5.5
                sepal_width = math.random() * 0.8 + 2.2
                petal_length = math.random() * 0.8 + 3.5
                petal_width = math.random() * 0.5 + 1.0
            else  -- Virginica
                sepal_length = math.random() * 0.8 + 6.1
                sepal_width = math.random() * 0.8 + 2.8
                petal_length = math.random() * 0.8 + 4.8
                petal_width = math.random() * 0.7 + 1.5
            end

            -- 添加随机噪声
            sepal_length = sepal_length + (math.random() - 0.5) * noise_level
            sepal_width = sepal_width + (math.random() - 0.5) * noise_level
            petal_length = petal_length + (math.random() - 0.5) * noise_level
            petal_width = petal_width + (math.random() - 0.5) * noise_level

            table.insert(X, {sepal_length, sepal_width, petal_length, petal_width})

            -- 有 3% 的概率给出错误标签
            if math.random() < mislabel_rate then
                table.insert(y, math.random(1, 3))  -- 随机标签
            else
                table.insert(y, class)
            end
        end
    end
    return X, y
end



-- 加载鸢尾花数据集
local X, y = generate_iris_dataset()
print("y =", y)
if y == nil then
    print("y is nil!")
elseif type(y) ~= "table" then
    print("y is not a table, it's a " .. type(y))
else
    print("y has " .. #y .. " elements")
end

local function one_hot_encode(labels)
    if not labels or type(labels) ~= "table" or #labels == 0 then
        error("Invalid input to one_hot_encode: expected non-empty table")
    end

    local unique_labels = {}
    local label_to_index = {}

    -- 找出所有唯一的标签
    for _, label in ipairs(labels) do
        if not label_to_index[label] then
            table.insert(unique_labels, label)
            label_to_index[label] = #unique_labels
        end
    end

    -- 创建独热编码
    local encoded = {}
    for i, label in ipairs(labels) do
        local encoding = {}
        for j = 1, #unique_labels do
            encoding[j] = 0
        end
        encoding[label_to_index[label]] = 1
        encoded[i] = encoding
    end

    return encoded
end

-- 数据预处理
local X_normalized = matrix.scale(X)  -- 归一化特征
local y_onehot = one_hot_encode(y)    -- 独热编码标签

local function train_test_split(X, y, test_size)
    assert(#X == #y, "X and y must have the same length")
    local n = #X
    local n_test = math.floor(n * test_size)
    local n_train = n - n_test

    -- 创建索引数组并随机打乱
    local indices = {}
    for i = 1, n do
        indices[i] = i
    end
    for i = n, 2, -1 do
        local j = math.random(i)
        indices[i], indices[j] = indices[j], indices[i]
    end

    -- 分割数据
    local X_train, X_test, y_train, y_test = {}, {}, {}, {}
    for i = 1, n_train do
        table.insert(X_train, X[indices[i]])
        table.insert(y_train, y[indices[i]])
    end
    for i = n_train + 1, n do
        table.insert(X_test, X[indices[i]])
        table.insert(y_test, y[indices[i]])
    end

    return X_train, X_test, y_train, y_test
end

-- 分割训练集和测试集
local X_train, X_test, y_train, y_test = train_test_split(X_normalized, y_onehot, 0.2)

print("X_test type:", type(X_test))
print("X_test dimensions:", #X_test, X_test[1] and #X_test[1] or "unknown")

-- 初始化网络参数
local input_dim = #X_train[1]
local hidden_dim = 10
local output_dim = #y_train[1]
local W1 = matrix.scale(matrix.random(input_dim, hidden_dim), 0.01)

local b1 = {}
for i = 1, hidden_dim do
    b1[i] = 0
end

local b2 = {}
for i = 1, output_dim do
    b2[i] = 0
end

local W2 = matrix.scale(matrix.random(hidden_dim, output_dim), 0.01)

print("X type:", type(X))
print("X length:", #X)
print("W1 type:", type(W1))
print("W1 length:", #W1)

-- 定义前向传播函数
local function forward(X, W1, b1, W2, b2)
    if type(X) ~= "table" or type(W1) ~= "table" or type(b1) ~= "table" or type(W2) ~= "table" or type(b2) ~= "table" then
        error("forward: 输入参数类型错误")
    end

    print("X dimensions:", #X, X[1] and #X[1] or "unknown")
    print("W1 dimensions:", #W1, W1[1] and #W1[1] or "unknown")
    print("b1 type:", type(b1), "length:", #b1)

    local Z1 = matrix.add_bias(matrix.mul(X, W1), b1)
    print("Z1 dimensions:", #Z1, Z1[1] and #Z1[1] or "unknown")

    local A1 = matrix.apply(Z1, neuro.relu)
    local Z2 = matrix.add_bias(matrix.mul(A1, W2), b2)
    local A2 = matrix.apply(Z2, neuro.sigmoid)
    return Z1, A1, Z2, A2
end

-- 定义损失函数
local function loss(y_true, y_pred)
    return neuro.cross_entropy(y_true, y_pred)
end

-- 定义反向传播函数
local function backward(X, y, Z1, A1, A2, W1, W2)
    local m = #X
    local dZ2 = matrix.sub(A2, y)
    print("dZ2 dimensions:", #dZ2, #dZ2[1])
    print("A1 dimensions:", #A1, #A1[1])
    local dW2 = matrix.scale(matrix.mul(matrix.transpose(A1), dZ2), 1 / m)
    print("W2 dimensions:", #W2, #W2[1])
    local W2_t = matrix.transpose(W2)
    print("W2_t dimensions:", #W2_t, #W2_t[1])
    local dA1 = matrix.mul(dZ2, matrix.transpose(W2))
    print("dA1 dimensions:", #dA1, #dA1[1])

    -- 使用元素级别乘法计算 ReLU 的导数
    local dZ1 = matrix.hadamard(dA1, matrix.apply(Z1, function(x) return x > 0 and 1 or 0 end))
    print("dZ1 dimensions:", #dZ1, #dZ1[1])

    local dW1 = matrix.scale(matrix.mul(matrix.transpose(X), dZ1), 1 / m)

    -- 计算偏置的梯度
    local db1 = {}
    for j = 1, #dZ1[1] do
        local sum = 0
        for i = 1, #dZ1 do
            sum = sum + dZ1[i][j]
        end
        db1[j] = sum / #dZ1
    end

    local db2 = {}
    for j = 1, #dZ2[1] do
        local sum = 0
        for i = 1, #dZ2 do
            sum = sum + dZ2[i][j]
        end
        db2[j] = sum / #dZ2
    end

    -- 检查 db1 是否是一个表
    if type(db1) ~= "table" then
        db1 = {db1}
    end

    print("db1 type:", type(db1))
    if type(db1) == "table" then
        print("db1 structure:", #db1, type(db1[1]) == "table" and #db1[1] or "not a table")
    else
        print("db1 is not a table")
    end

    return dW1, db1, dW2, db2
end

-- 训练循环
local epochs = 1000 -- 训练轮数
local learning_rate = 0.1 -- 学习率

for epoch = 1, epochs do
    -- 前向传播
    local Z1, A1, _, A2 = forward(X_train, W1, b1, W2, b2)

    -- 计算损失
    local train_loss = loss(y_train, A2)

    -- 反向传播
    local dW1, db1, dW2, db2 = backward(X_train, y_train, Z1, A1, A2, W1, W2)

    print("Before update:")
    print("W1 type:", type(W1), "dimensions:", #W1, #W1[1])
    print("b1 type:", type(b1), "length:", #b1)
    print("W2 type:", type(W2), "dimensions:", #W2, #W2[1])
    print("b2 type:", type(b2), "length:", #b2)
    print("dW1 type:", type(dW1), "dimensions:", #dW1, #dW1[1])
    print("db1 type:", type(db1), "dimensions:", type(db1) == "table" and (#db1 .. " " .. (type(db1[1]) == "table" and #db1[1] or 1)) or "not a table")
    print("dW2 type:", type(dW2), "dimensions:", #dW2, #dW2[1])
    print("db2 type:", type(db2), "dimensions:", type(db2) == "table" and (#db2 .. " " .. (type(db2[1]) == "table" and #db2[1] or 1)) or "not a table")

    local function safe_sub(a, b, name)
        if type(a) == "table" and type(b) == "table" then
            if #a == #b then
                local result = {}
                for i = 1, #a do
                    if type(a[i]) == "table" and type(b[i]) == "table" then
                        result[i] = {}
                        for j = 1, #a[i] do
                            result[i][j] = a[i][j] - b[i][j]
                        end
                    else
                        result[i] = a[i] - b[i]
                    end
                end
                return result
            else
                error(string.format("更新 %s 时出错：矩阵维度不匹配，无法进行减法", name))
            end
        elseif type(a) == "number" and type(b) == "number" then
            return a - b
        else
            error(string.format("更新 %s 时出错：不支持的减法类型，得到 %s 和 %s", name, type(a), type(b)))
        end
    end

    -- 更新参数
    W1 = safe_sub(W1, matrix.scale(dW1, learning_rate), "W1")
    for i = 1, #b1 do
        b1[i] = b1[i] - learning_rate * db1[i]
    end
    W2 = safe_sub(W2, matrix.scale(dW2, learning_rate), "W2")
    for i = 1, #b2 do
        b2[i] = b2[i] - learning_rate * db2[i]
    end

    function calculate_accuracy(y_true, y_pred)
        local correct = 0
        local total = #y_true

        for i = 1, total do
            local true_label = argmax(y_true[i])
            local pred_label = argmax(y_pred[i])
            if true_label == pred_label then
                correct = correct + 1
            end
        end

        return correct / total
    end

    function argmax(vector)
        local max_value = vector[1]
        local max_index = 1
        for i = 2, #vector do
            if vector[i] > max_value then
                max_value = vector[i]
                max_index = i
            end
        end
        return max_index
    end

    -- 在测试集上评估
    local _, _, _, A2_test = forward(X_test, W1, b1, W2, b2)
    local test_loss = loss(y_test, A2_test)
    local test_accuracy = calculate_accuracy(y_test, A2_test)

    if epoch % 10 == 0 or epoch == epochs then
        print(string.format("Epoch %d: Train Loss = %.4f, Test Loss = %.4f, Test Accuracy = %.4f",
            epoch, train_loss, test_loss, test_accuracy))
    end
end

